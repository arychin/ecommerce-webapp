-> INSTALLATION & SETUP 
-------------------------
- save ts and its types as dev dependency
```npm i --save-dev typescript @types/express @types/node```

- tsc command builds the ts file and creates a new repo 
'dist' to store the generated js files

- make sure to make the scripts out of building, 
starting & running commands

- use "tsc -w" to continuously watch for changes done in 
the ts, this will automatically map the changes to the 
js files in dist and you'd not have to rebuild 
(make a script out of this too)


--------------------------------------------------------------------------------
-> FOLDER STRUCTURE
--------------------
- so we create mws, models, controllers, routes, types and utils 
as dirs in the src dir
-  mws would contain verify-token mw and the error-handler, models 
would contain the database tables, routes will obv contain the BE 
routes, types would contain the "additional" type-safety types we 
have used at certain places e.g. to structure the request body, 
utils contain utility functions such as MongoDB connection code


--------------------------------------------------------------------------------
-> USER MODEL 
---------------
- we make fields such as _id, photo, name, email, role, gender & dob
- we also make a virtual attribute of age schema.virtual("age").get(function(){ })
- to include this virtual attribute we need to define types or an interface (IUser)
mentioning the types of all attributes and of age as well
- then we create the User model which is of the type IUser


--------------------------------------------------------------------------------
-> USER ROUTES 
-----------------
- we define the prefix for the user route in app.ts and pass in 
"userRoutes" from routes/user.js 
- we define the new user creation route in user.ts using express.Router()
- on hitting this api endpoint the newUser fn fires which is present in
the user.ts controller
- in this controller we take data from the FE/Postman and populate fields
such as {name, email, photo, gender, _id, dob} these are then inserted into 
the DB as a document in the User table
- on failure we call the last mw we made (last cuz this is written in the last
so that all routes can hit this middleware using the next() function)
errorMiddleware and handle errors gracefully, we have created this custom mw
so that we do not have to write the error logic again and again, we can just 
pass params as needed in this middleware.
- we create the getAllUsers route firing which will fetch all the users from the 
database but since this route should only be accessible to the Admin we add a 
adminOnly middleware onto this route
- the adminOnly mw checks whether the "id" received from query-param, it finds the 
user with this id in the DB and checks their "role" - user or admin
- similarly we have create the getUser route which fetches a single user using path
parameter 'id' (dynamic ID) and deleteUser which deletes the user with the matching 
id as the path-param, but the deleteUser route can only be accessed by the admin, so 
we apply the appropriate adminOnly mw.
- since getUser and deleteUser are essentially the same route we chain these together
using app.router("/:id")


---------------------------------------------------------------------------------
-> CUSTOM ERROR HANDLER 
------------------------
- there is no way to add a custom status on Error in TS 
in JS you can set properties dynamically on the Error obj
- so we make a custom class ErrorHandler in utils dir
- and now instead of defining an error the old way using 
the "new Error" thing we can do it by "new ErrorHandler"
- so anytime we encounter an Error, we create an object of
type ErrorHandler and send it to the errorMiddleware


----------------------------------------------------------------------------------
-> PRODUCT MODEL 
----------------------
- we make fields such as photo, name, price, stock & category
- then we create the Product model and we do not need to define an
interface and give this model a type since we are not using any virtual attr

-------------------------------------------------------------------------------------
-> MULTER, DOTENV, MORGAN & UUID
----------------------------------
- we have used "multer" to store images on the server (our pc)
- we define a unique id using "uuid" and we find the extension name of the image we upload 
- we combine the id with the extName to give each file a unique name
- we define a func singleUpload which initializes a multer obj which takes storage option
- we set the filename as `${id}.${extName}` and the destination as "uploads"
- we use this singleUpload func as a middleware 
- this middleware stores the images from "req.file" in the uploads folder
- "morgan" package is used to display all the info about the api call on the console
- we i the package "dotenv" and config the path in app.ts to secure our env vars

-------------------------------------------------------------------------------------
-> NODE CACHE OPTIMIZATION
-----------------------------
- in app.ts import NodeCache, declare an instance myCache
- we can use this myCache in controller functions
- we can cache first time reqs, and then again someone hits that api we can immediately
fetch the data from the cache, it would be very optimized and fast 
- we make a utility func invalidateCache which would clear the cache, if there
is any changes in the db and we need to show updated data when apis are hit
e.g. when a new product is created (or) when an order is deleted &c
- cache takes only strings inside so we need to stringify the arrays we put & when we
receive them back we need to parse them to retrieve what was originally there

--------------------------------------------------------------------------------------
-> PRODUCT ROUTES & CONTROLLERS
----------------------------------
- we create 
/new, 
/latest, 
/all, 
/category, 
/admin-products,
/:id - single product route, update product route, delete product route

- route: /new, controller: newProd 
this is a controller function (mws: singleUpload & adminOnly) which is used 
on the /new route, using this we create a new product, it takes {name,category, price, stock}
from req.body & photo from req.file, appropriate error handling for missing fields is 
incorporated if any field is missing, we delete the photo from the "uploads" folder using 
fs module we then create this document in the Product table and invalidateCache & return the 
json file as "Product Created"

- route: /latest, controller: getLatestProducts
this controller func uses createdAt: -1 & limit(5) to fetch the latest 5 products from the db
this func used myCache to cache the results and optimize itself

- route: /all, controller: getAllProducts
we take {search, sort, category, price} from req.query, page by typecasting req.query.page 
into Number, similarly typecasting product_per_page from the env file to Number
we need to take query params only if they exist so we create a baseQuery obj which will be 
filled if search exists or if price or category exist, then we get the filtered products
from the db using baseQuery, we have applied sort on this result if it exists, we have 
applied limit and skip as well then we find the totalPages which is allFilteredProducts.length/limit
we then send the products array obtained as well as the totalPages as a res

- route: /category, controller: getAllCategories





--------------------------------------------------------------------------------------
-> ORDER MODEL
----------------
-


---------------------------------------------------------------------------------------
-> ORDER ROUTES & CONTROLLERS
--------------------------------
-


----------------------------------------------------------------------------------------
-> COUPON MODEL
------------------
- 


-----------------------------------------------------------------------------------------
-> COUPON ROUTES & CONTROLLERS
---------------------------------
- 


------------------------------------------------------------------------------------------
-> DASHBOARD STATISTICS API 
-----------------------------
- 


-------------------------------------------------------------------------------------------
